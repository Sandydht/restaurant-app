# Skenario menyukai restaurant
1. Restaurant belum disukai. (selesai)
2. Widget untuk menyukai restaurant ditampilkan. (selesai)
3. Widget untuk menyukai restaurant ditekan oleh pengguna. (selesai)
4. Restaurant ditambahkan ke daftar restaurant yang disukai. (selesai)
	a. Ternyata restaurant sudah disukai. (selesai)
		- Tidak perlu menyimpan kembali. (selesai)
	b. Data restaurant tidak memiliki ID (selesai)
		- Sistem tidak memproses penyimpanan. (selesai)
		- Sistem tidak gagal. (selesai)

# Skenario batal menyukai restaurant. (selesai)
1. Restaurant sudah disukai. (selesai)
2. Widget untuk batal menyukai restaurant ditampilkan. (selesai)
3. Widget pembatalan ditekan oleh pengguna. (selesai)
4. Restaurant dihapus dari daftar restaurant yang disukai. (selesai)
	a. Ternyata restaurant tidak ada dalam daftar restaurant yang disukai. (selesai)


# TODO
1. Alur negatif menyimpan restaurant tanpa ID tidak boleh menyebabkan kegagalan. (selesai)

---------------------------------------------------------------------------

# Use case mencari restaurant yang disukai
1. Pengguna memasukan nama restaurant yang dicari.
2. Restaurant yang dicari ditampilkan.
	a. Bila tidak ada, tampilkan informasi bahwa tidak ada restaurant yang ditemukan.

# Studi kasus
1. Bila pengguna memasukan query 'restaurant a', maka: (selesai)
	a. Presenter akan meminta ke Model untuk memberikan restaurant yang disukai dengan yang cocok untuk pencarian 'restaurant a'. (selesai)
	b. Presenter akan menampilkan View (DOM) semua restaurant yang dikembalikan oleh Model. (selesai)
2. Bila pengguna memasukan query kosong, maka: (selesai)
	a. Presenter akan meminta Model untuk memberikan semua restaurant yang disukai. (selesai)
	b. Presenter akan menampilkan ke View semua restaurant yang disukai yang telah diberikan oleh Model. (selesai)
3. Bila pengguna memasukan query, dan tidak ada restaurant yang cocok, maka: (selesai)
	a. Presenter akan meminta Model untuk mencari restaurant. (selesai)
	b. Presenter akan menampilkan informasi tidak ada restaurant yang ditemukan pada View. (selesai)

# TODO
1. Ringkas kode untuk mempersiapkan test. (selesai)

---------------------------------------------------------------------------

# Use case menampilkan hasil pencarian restaurant pada browser
1. Buka halaman restaurant yang disukai. (selesai)
2. Tampilkan semua restaurant yang disukai. (selesai)
	a. Presenter meminta semua daftar restaurant yang disukai kepada Model. (selesai)
	b. Model mengembalikan daftar restaurant. (selesai)
	c. Presenter meminta View menampilkan daftar restaurant. (selesai)
3. Bila tidak ada restaurant yang disukai, berikan informasi. (selesai)
	a. Presenter meminta semua daftar restaurant yang disukai kepada Model. (selesai)
	b. Model mengembalikan daftar kosong. (selesai)
	c. Presenter meminta View menampilkan informasi bahwa belum ada restaurant yang disukai. (selesai)
 
# TODO
1. Template hasil pencarian menggunakan template menampilkan restaurant yang disukai. (selesai)
2. Mengubah nama FavoriteRestaurantSearchView agar lebih general.

---------------------------------------------------------------------------

